# Coraza Main Configuration
# For detailed configuration, refer to https://coraza.io/docs/concepts/configuration/


# Set the WAF Log Level
SecRuleEngine On
SecAuditEngine On
SecAuditLogParts ABCEFHZ
SecAuditLogRelevantStatus "^(?:5|4(?![04]))"
SecAuditLogType Concurrent
SecAuditLog /var/log/coraza/audit.log
SecDebugLog /var/log/coraza/debug.log
SecDebugLogLevel 9


# Configure Response Body Access
SecResponseBodyAccess On
SecResponseBodyMimeType text/plain text/html text/xml application/json application/xml


# Core Rule Set (CRS) includes
# These are handled in main.go for simpler embedding in this lab setup.
# In a real scenario, you'd directly include them here if CRS is on the filesystem.
# Include @crs-setup.conf.example
# Include @owasp_crs/rules/*.conf


# --- Custom Rules for AI Integration ---
# This rule demonstrates how you might use an AI score.
# The Go code in main.go sets TX:AI_SCORE based on the AI service's response.
SecRule TX:AI_SCORE "@gt 0.8" \
    "id:2000,\
    phase:2,\
    deny,\
    status:403,\
    msg:'AI detected high malicious score from AI microservice.',\
    log,\
    auditlog,\
    tag:'AI_DETECTION',\
    tag:'HIGH_MALICIOUS_SCORE'"


# Example rule to log all requests for AI analysis (if not already handled by AI call in Go)
# SecRule REQUEST_HEADERS:User-Agent "@rx ^" \
#    "id:2001,\
#    phase:2,\
#    pass,\
#    log,\
#    msg:'Request passed for AI analysis'"


# Log all relevant information for AI
SecRuleEngine On
SecAuditEngine On
SecAuditLogRelevantStatus "^(?:5|4(?![04]))"
SecAuditLogType Concurrent
SecAuditLog /var/log/coraza/audit.log
SecDebugLog /var/log/coraza/debug.log
SecDebugLogLevel 4
